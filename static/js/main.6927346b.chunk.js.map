{"version":3,"sources":["components/Pairer.js","components/Person.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["Pairer","people","selectMate","mate","femaleName","setPeople","value","onChange","event","target","map","person","sex","name","Person","mother","father","style","color","getAncestorsNames","ancestorNames","findPerson","concat","getMaxAncestorGenerations","mothersAncestors","fathersAncestors","Math","max","find","peopleAreRelated","name1","name2","personAncestors","mateAncestors","filter","includes","length","scenarios","1","males","females","depth","depthLabel","2","3","getInitialPeople","scenario","a","Promise","all","fetch","then","response","json","results","girls","first","boys","allPeople","mateName","undefined","makeNewPeople","newPeople","parents","index","gender","setScenario","every","window","confirm","personMaxAncestors","matesMaxAncestors","console","log","push","newBorns","App","useState","useEffect","key","onClick","reproduce","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAWeA,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAYC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,WAAYC,EAAzC,EAAyCA,UAAzC,OACb,yBAAQC,MAAOH,EAAMI,SAAU,SAACC,GAAD,OAAWN,EAAWE,EAAYI,EAAMC,OAAOH,MAAOL,EAAQI,IAA7F,UACE,wBAAQC,MAAM,OAAd,6BACCL,EAAOS,KAAI,SAACC,GAAD,MACK,SAAfA,EAAOC,KAAkB,wBAA0BN,MAAOK,EAAOE,KAAxC,SAA+CF,EAAOE,MAAzCF,EAAOE,aCIpCC,EAPA,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAMD,EAAT,EAASA,IAAKT,EAAd,EAAcA,KAAsBE,GAApC,EAAoBU,OAApB,EAA4BC,OAA5B,EAAoCX,WAAWJ,EAA/C,EAA+CA,OAAQC,EAAvD,EAAuDA,WAAvD,OACb,+BACE,sBAAMe,MAAO,CAACC,MAAe,SAARN,EAAiB,OAAS,QAA/C,SAAyDC,IAChD,WAARD,GAAoB,qCAAG,IAAH,MAAU,cAAC,EAAD,CAAQX,OAAQA,EAAQG,WAAYS,EAAMV,KAAMA,EAAMD,WAAYA,EAAYG,UAAWA,WCN5H,SAASc,EAAkBN,EAAMZ,GAC/B,IAAImB,EAAgB,CAACP,GAEfF,EAASU,EAAWR,EAAMZ,GAUhC,OARIU,EAAOI,SACTK,EAAgBA,EAAcE,OAAOH,EAAkBR,EAAOI,OAAQd,KAGpEU,EAAOK,SACTI,EAAgBA,EAAcE,OAAOH,EAAkBR,EAAOK,OAAQf,KAGjEmB,EAGF,SAASG,EAA0BV,EAAMZ,GAC9C,IAAMU,EAASU,EAAWR,EAAMZ,GAC1BuB,EAAmBb,EAAOI,OAASQ,EAA0BZ,EAAOI,OAAQd,GAAU,EAAI,EAC1FwB,EAAmBd,EAAOK,OAASO,EAA0BZ,EAAOK,OAAQf,GAAU,EAAI,EAEhG,OAAOyB,KAAKC,IAAIH,EAAkBC,GAG7B,SAASJ,EAAWR,EAAMZ,GAC/B,OAAOA,EAAO2B,MAAK,SAACjB,GAClB,OAAOA,EAAOE,OAASA,KAIpB,SAASgB,EAAiBC,EAAOC,EAAO9B,GAC7C,IAAM+B,EAAkBb,EAAkBW,EAAO7B,GAC3CgC,EAAgBd,EAAkBY,EAAO9B,GAE/C,OADwB+B,EAAgBE,QAAO,SAAA5B,GAAK,OAAI2B,EAAcE,SAAS7B,MACxD8B,OAAS,E,UC5B5BC,EAAY,CAChBC,EAAG,CAACC,MAAO,EAAGC,QAAS,EAAGC,MAAO,EAAGC,WAAY,cAChDC,EAAG,CAACJ,MAAO,EAAGC,QAAS,EAAGC,MAAO,EAAGC,WAAY,oBAChDE,EAAG,CAACL,MAAO,EAAGC,QAAS,EAAGC,MAAO,EAAGC,WAAY,qB,SAGnCG,E,gFAAf,WAAgCxC,EAAWyC,GAA3C,qBAAAC,EAAA,sEACwBC,QAAQC,IAAI,CAChCC,MAAM,oDAAD,OAAqDb,EAAUS,GAAUN,QAAzE,8BAA6GW,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC9IH,MAAM,kDAAD,OAAmDb,EAAUS,GAAUP,MAAvE,8BAAyGY,MAAK,SAACC,GAAD,OAAcA,EAASC,YAH9I,OACQC,EADR,OAMQC,EAAQD,EAAQ,GAAGA,QAAQ5C,KAAI,SAACC,GACpC,MAAO,CAACE,KAAMF,EAAOE,KAAK2C,MAAO5C,IAAK,aAElC6C,EAAOH,EAAQ,GAAGA,QAAQ5C,KAAI,SAACC,GACnC,MAAO,CAACE,KAAMF,EAAOE,KAAK2C,MAAO5C,IAAK,WAElC8C,EAAYH,EAAMjC,OAAOmC,GAC/BpD,EAAUqD,GAbZ,4C,sBAgBA,SAASxD,EAAWW,EAAM8C,EAAU1D,EAAQI,GAU1CA,EATmBJ,EAAOS,KAAI,SAAAC,GAC5B,OAAIE,IAASF,EAAOE,KACD,SAAb8C,EACK,2BAAIhD,GAAX,IAAmBR,UAAMyD,IAEpB,2BAAIjD,GAAX,IAAmBR,KAAMwD,IAEpBhD,M,SAKIkD,E,8EAAf,WAA6BC,GAA7B,eAAAf,EAAA,sEACwBG,MAAM,sCAAD,OAAuCY,EAAU1B,OAAjD,qCAA2Fe,MAAK,SAACC,GAAD,OAAcA,EAASC,UADpJ,cACQC,EADR,yBAESQ,EAAUpD,KAAI,SAACqD,EAASC,GAC7B,IAAMrD,EAAS2C,EAAQA,QAAQU,GAC/B,MAAO,CACLnD,KAAMF,EAAOE,KAAK2C,MAClB5C,IAAKD,EAAOsD,OACZlD,OAAQgD,EAAQhD,OAChBC,OAAQ+C,EAAQ/C,YARtB,4C,kEAaA,WAAyBf,EAAQI,EAAWyC,EAAUoB,GAAtD,iBAAAnB,EAAA,6DACMe,EAAY,GADlB,SAEQ7D,EAAOkE,OAAM,SAAAxD,GACjB,GAAIA,EAAOR,KAAM,CACf,GAAI0B,EAAiBlB,EAAOE,KAAMF,EAAOR,KAAMF,GAAS,CACtCmE,OAAOC,QAAP,UAAkB1D,EAAOE,KAAzB,gBAAqCF,EAAOR,KAA5C,6CAOhB,OALE0C,EAAiBxC,EAAWyC,GAI9BgB,EAAY,IACL,EAET,IAAMQ,EAAqB/C,EAA0BZ,EAAOE,KAAMZ,GAC5DsE,EAAoBhD,EAA0BZ,EAAOR,KAAMF,GAEjE,GADAuE,QAAQC,IAAIH,EAAoBC,EAAmBlC,EAAUS,GAAUL,OACnEf,KAAKC,IAAI2C,EAAoBC,GAAqB,GAAKlC,EAAUS,GAAUL,MAAO,CACpF,GAAIK,GAAYT,EAAUD,OAAQ,CAChBgC,OAAOC,QAAQ,gCAE7BH,EAAY,OAIT,CACWE,OAAOC,QAAQ,4CAE7BH,EAAYpB,EAAW,GAK3B,OAAO,EAETgB,EAAUY,KAAK,CAAC3D,OAAQJ,EAAOE,KAAMG,OAAQL,EAAOR,OAEtD,OAAO,KArCX,YAuCM2D,EAAU1B,OAAS,GAvCzB,gCAwC2ByB,EAAcC,GAxCzC,OAwCUa,EAxCV,OAyCItE,EAAUJ,EAAOqB,OAAOqD,IAzC5B,4C,sBAuEeC,MAzBf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACN5E,EADM,KACEI,EADF,OAEmBwE,mBAAS,GAF5B,mBAEN/B,EAFM,KAEIoB,EAFJ,KAQb,OAJAY,qBAAU,WACRjC,EAAiBxC,EAAWyC,KAC3B,CAACA,IAGF,2DAC2BT,EAAUS,GAAUP,MAAQF,EAAUS,GAAUN,QAD3E,mCAEKH,EAAUS,GAAUJ,WAFzB,uBAGE,6BACGzC,EAAOS,KAAI,SAACC,GAAD,OACV,wBAAC,EAAD,2BAAYA,GAAZ,IAAoBoE,IAAKpE,EAAOE,KAAMR,UAAWA,EAAWJ,OAAQA,EAC5DC,WAAYA,UAGxB,wBAAQ8E,QAAS,kB,iDAAMC,CAAUhF,EAAQI,EAAWyC,EAAUoB,IAA9D,2BC1GSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6927346b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Pairer = ({ people, selectMate, mate, femaleName, setPeople }) => (\n  <select value={mate} onChange={(event) => selectMate(femaleName, event.target.value, people, setPeople)}>\n    <option value='none'>- Choose Mate -</option>\n    {people.map((person) => (\n      person.sex === 'male' && <option key={person.name} value={person.name}>{person.name}</option>\n    ))}\n  </select>\n);\n\nexport default Pairer\n","import React from 'react';\nimport Pairer from \"./Pairer\";\n\nconst Person = ({ name, sex, mate, mother, father, setPeople, people, selectMate }) => (\n  <li>\n    <span style={{color: sex === 'male' ? 'blue' : 'pink'}}>{name}</span>\n    {sex === 'female' && <>{' '} - <Pairer people={people} femaleName={name} mate={mate} selectMate={selectMate} setPeople={setPeople}/></>}\n  </li>\n);\n\nexport default Person\n","function getAncestorsNames(name, people) {\n  let ancestorNames = [name];\n\n  const person = findPerson(name, people);\n\n  if (person.mother) {\n    ancestorNames = ancestorNames.concat(getAncestorsNames(person.mother, people));\n  }\n\n  if (person.father) {\n    ancestorNames = ancestorNames.concat(getAncestorsNames(person.father, people));\n  }\n\n  return ancestorNames;\n}\n\nexport function getMaxAncestorGenerations(name, people) {\n  const person = findPerson(name, people);\n  const mothersAncestors = person.mother ? getMaxAncestorGenerations(person.mother, people) + 1 : 0;\n  const fathersAncestors = person.father ? getMaxAncestorGenerations(person.father, people) + 1 : 0;\n\n  return Math.max(mothersAncestors, fathersAncestors);\n}\n\nexport function findPerson(name, people) {\n  return people.find((person) => {\n    return person.name === name;\n  });\n}\n\nexport function peopleAreRelated(name1, name2, people) {\n  const personAncestors = getAncestorsNames(name1, people);\n  const mateAncestors = getAncestorsNames(name2, people);\n  const commonAncestors = personAncestors.filter(value => mateAncestors.includes(value));\n  return commonAncestors.length > 0;\n}\n","import {useEffect, useState} from 'react';\nimport Person from \"./components/Person\";\nimport {getMaxAncestorGenerations, peopleAreRelated} from \"./utils/utils\";\n\nimport './App.css';\n\nconst scenarios = {\n  1: {males: 2, females: 1, depth: 2, depthLabel: 'grandchild'},\n  2: {males: 3, females: 1, depth: 3, depthLabel: 'great-grandchild'},\n  3: {males: 2, females: 2, depth: 3, depthLabel: 'great-grandchild'}\n};\n\nasync function getInitialPeople(setPeople, scenario) {\n  const results = await Promise.all([\n    fetch(`https://randomuser.me/api/?gender=female&results=${scenarios[scenario].females}&inc=name&nat=us,dk,fr,gb`).then((response) => response.json()),\n    fetch(`https://randomuser.me/api/?gender=male&results=${scenarios[scenario].males}&inc=name&nat=us,dk,fr,gb`).then((response) => response.json())\n  ]);\n\n  const girls = results[0].results.map((person) => {\n    return {name: person.name.first, sex: 'female'}\n  });\n  const boys = results[1].results.map((person) => {\n    return {name: person.name.first, sex: 'male'}\n  });\n  const allPeople = girls.concat(boys);\n  setPeople(allPeople);\n}\n\nfunction selectMate(name, mateName, people, setPeople) {\n  const tempPeople = people.map(person => {\n    if (name === person.name) {\n      if (mateName === 'none') {\n        return {...person, mate: undefined};\n      }\n      return {...person, mate: mateName};\n    }\n    return person;\n  })\n  setPeople(tempPeople);\n}\n\nasync function makeNewPeople(newPeople) {\n  const results = await fetch(`https://randomuser.me/api/?results=${newPeople.length}&inc=name,gender&nat=us,dk,fr,gb`).then((response) => response.json());\n  return newPeople.map((parents, index) => {\n    const person = results.results[index];\n    return {\n      name: person.name.first,\n      sex: person.gender,\n      mother: parents.mother,\n      father: parents.father,\n    }\n  });\n}\n\nasync function reproduce(people, setPeople, scenario, setScenario) {\n  let newPeople = [];\n  await people.every(person => {\n    if (person.mate) {\n      if (peopleAreRelated(person.name, person.mate, people)) {\n        const confirm = window.confirm(`${person.name} and ${person.mate} are related. Inbreeding is not allowed!`);\n        if (confirm) {\n          getInitialPeople(setPeople, scenario);\n        } else {\n          getInitialPeople(setPeople, scenario);\n        }\n        newPeople = [];\n        return false;\n      }\n      const personMaxAncestors = getMaxAncestorGenerations(person.name, people);\n      const matesMaxAncestors = getMaxAncestorGenerations(person.mate, people);\n      console.log(personMaxAncestors, matesMaxAncestors, scenarios[scenario].depth);\n      if (Math.max(personMaxAncestors, matesMaxAncestors) + 1 >= scenarios[scenario].depth) {\n        if (scenario >= scenarios.length) {\n          const confirm = window.confirm('Well done! You won the game!');\n          if (confirm) {\n            setScenario(1);\n          } else {\n            setScenario(1);\n          }\n        } else {\n          const confirm = window.confirm('Well done! On to the next level for you!');\n          if (confirm) {\n            setScenario(scenario + 1);\n          } else {\n            setScenario(scenario + 1);\n          }\n        }\n        return false;\n      }\n      newPeople.push({mother: person.name, father: person.mate});\n    }\n    return true;\n  });\n  if (newPeople.length > 0) {\n    const newBorns = await makeNewPeople(newPeople);\n    setPeople(people.concat(newBorns));\n  }\n\n}\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n  const [scenario, setScenario] = useState(1);\n\n  useEffect(() => {\n    getInitialPeople(setPeople, scenario);\n  }, [scenario]);\n\n  return (\n    <div>\n      The Event has left only {scenarios[scenario].males + scenarios[scenario].females} people alive. Give the woman\n      a {scenarios[scenario].depthLabel} without inbreeding.\n      <ul>\n        {people.map((person) => (\n          <Person {...person} key={person.name} setPeople={setPeople} people={people}\n                  selectMate={selectMate}/>\n        ))}\n      </ul>\n      <button onClick={() => reproduce(people, setPeople, scenario, setScenario)}>\n        Reproduce\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}